{"version":3,"sources":["theme.tsx","App.tsx","reportWebVitals.ts","i18next.ts","serviceWorkerRegistration.ts","serviceWorkerWrapper.tsx","index.tsx"],"names":["theme","createMuiTheme","typography","button","textTransform","palette","primary","orange","secondary","purple","IndexPage","lazy","CoursesRoute","SettingsPage","App","ThemeProvider","path","component","exact","reportWebVitals","i18next","use","Backend","initReactI18next","LanguageDetector","init","backend","loadPath","fallbackLng","debug","supportedLngs","ns","interpolation","escapeValue","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ServiceWorkerWrapper","enqueueSnackbar","useSnackbar","React","useState","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","onSWSuccess","persist","useEffect","serviceWorkerRegistration","reloadPage","postMessage","type","Snackbar","open","message","onClick","anchorOrigin","vertical","horizontal","action","Button","color","size","ReactDOM","render","fallback","CircularProgress","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.71b9402f.chunk.js","sourcesContent":["import { orange, purple } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({      \n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  },\n  palette: {\n      primary: orange,\n      secondary: purple\n  }\n});\n\nexport default theme;","import React, { lazy } from 'react';\nimport './App.css';\nimport theme from './theme';\nimport { ThemeProvider } from '@material-ui/core';\nimport {\n  Route,\n  HashRouter as Router, Switch\n} from 'react-router-dom';\nconst IndexPage = lazy(() => import('./pages/index'));\nconst CoursesRoute = lazy(() => import('./pages/courses/route'));\nconst SettingsPage = lazy(() => import('./pages/settings'));\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/courses\" component={CoursesRoute} />\n          <Route exact path=\"/\" component={IndexPage} />\n          <Route path=\"/settings\" component={SettingsPage} />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18next from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nconst i18n = i18next\n  .use(Backend)\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    backend: {\n      // for all available options read the backend's repository readme file\n      loadPath: '/locales/{{lng}}/{{ns}}.json'\n    },\n    fallbackLng: ['en', 'de'],\n    debug: true,\n    supportedLngs: ['en', 'de'],\n    ns: ['translation', 'common', 'courses', 'course'],\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC, useEffect } from 'react';\nimport { Snackbar, Button } from '@material-ui/core';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { useSnackbar } from 'notistack';\n\nconst ServiceWorkerWrapper: FC = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [showReload, setShowReload] = React.useState(false);\n  const [waitingWorker, setWaitingWorker] = React.useState<ServiceWorker | null>(null);\n\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n    setShowReload(true);\n    setWaitingWorker(registration.waiting);\n  };\n  const onSWSuccess = (registration: ServiceWorkerRegistration) => {\n    enqueueSnackbar('Ready for offline use.', {\n      persist: true,\n    });\n  };\n\n  useEffect(() => {\n    serviceWorkerRegistration.register({ onUpdate: onSWUpdate, onSuccess: onSWSuccess });\n  });\n\n  const reloadPage = () => {\n    waitingWorker?.postMessage({ type: 'SKIP_WAITING' });\n    setShowReload(false);\n    window.location.reload();\n  };\n\n  return (\n    <Snackbar\n      open={showReload}\n      message=\"A new version is available!\"\n      onClick={reloadPage}\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      action={\n        <Button\n          color=\"inherit\"\n          size=\"small\"\n          onClick={reloadPage}\n        >\n          Reload\n        </Button>\n      }\n    />\n  );\n}\n\nexport default ServiceWorkerWrapper;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './i18next';\nimport reportWebVitals from './reportWebVitals';\nimport ServiceWorkerWrapper from './serviceWorkerWrapper';\nimport { SnackbarProvider } from 'notistack';\nimport { CircularProgress } from '@material-ui/core';\n\n\nReactDOM.render(\n  <Suspense fallback={<CircularProgress />}>\n    <SnackbarProvider maxSnack={3}>\n      <App />\n    <ServiceWorkerWrapper />\n    </SnackbarProvider>\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}