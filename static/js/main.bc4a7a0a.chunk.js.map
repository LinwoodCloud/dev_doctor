{"version":3,"sources":["theme.tsx","pages/index.tsx","components/appbar.tsx","App.tsx","reportWebVitals.ts","i18next.ts","serviceWorkerRegistration.ts","serviceWorkerWrapper.tsx","index.tsx"],"names":["theme","createMuiTheme","typography","button","textTransform","palette","primary","orange","secondary","purple","useStyles","makeStyles","heroButtons","marginTop","spacing","heroContent","backgroundColor","background","paper","padding","IndexPage","t","useTranslation","classes","className","Container","maxWidth","Typography","align","variant","component","color","Grid","container","justify","item","Button","root","flexGrow","menuButton","marginRight","title","MyAppBar","i18n","React","useState","anchorEl","setAnchorEl","handleClose","changeLanguage","lng","AppBar","position","Toolbar","IconButton","edge","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","id","keepMounted","open","Boolean","onClose","MenuItem","App","ThemeProvider","path","reportWebVitals","i18next","use","Backend","initReactI18next","LanguageDetector","init","backend","loadPath","fallbackLng","debug","interpolation","escapeValue","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ServiceWorkerWrapper","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","useEffect","serviceWorkerRegistration","reloadPage","postMessage","type","Snackbar","message","anchorOrigin","vertical","horizontal","action","size","ReactDOM","render","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.bc4a7a0a.chunk.js","sourcesContent":["import { orange, purple } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({      \n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  },\n  palette: {\n      primary: orange,\n      secondary: purple\n  }\n});\n\nexport default theme;","import { Button, Container, Grid, makeStyles, Typography } from '@material-ui/core'\nimport React from 'react'\nimport { useTranslation } from \"react-i18next\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  heroButtons: {\n    marginTop: theme.spacing(8),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  }\n}));\nconst IndexPage = () => {\n  const {t} = useTranslation('common');\n  const classes = useStyles();\n  return (\n    <>\n    <div className={classes.heroContent}>\n      <Container maxWidth=\"sm\">\n        <Typography align=\"center\" variant=\"h2\" component=\"h1\">\n          {t('title')}\n        </Typography>\n        <Typography align=\"center\" variant=\"h5\" color=\"textSecondary\">\n          {t('subtitle')}\n        </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\">\n                    {t('courses')}\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"outlined\" color=\"primary\">\n                    {t('discord')}\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n      </Container>\n      </div>\n    </>\n  );\n};\n\nexport default IndexPage\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { useTranslation } from 'react-i18next';\nimport { AppBar, Button, IconButton, Menu, MenuItem, Toolbar, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function MyAppBar() {\n    const { i18n } = useTranslation();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n  \n    const handleClick = (event: { currentTarget: any; }) => {\n      setAnchorEl(event.currentTarget);\n    };\n  \n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n  \n    const changeLanguage = (lng: string) => {\n      i18n.changeLanguage(lng);\n      handleClose();\n    }\n    const classes = useStyles();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    News\n                </Typography>\n                <Button aria-controls=\"language-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n  LANGUAGE\n</Button>\n<Menu\n  id=\"language-menu\"\n  anchorEl={anchorEl}\n  keepMounted\n  open={Boolean(anchorEl)}\n  onClose={handleClose}\n>\n  <MenuItem onClick={() => changeLanguage('de')}>Deutsch</MenuItem>\n  <MenuItem onClick={() => changeLanguage('en')}>English</MenuItem>\n</Menu>\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport theme from './theme';\nimport { ThemeProvider } from '@material-ui/core';\nimport IndexPage from './pages/index';\nimport {\n  Route,\n  BrowserRouter as Router, Switch\n} from 'react-router-dom';\nimport MyAppBar from './components/appbar';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyAppBar />\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={IndexPage} />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18next from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nconst i18n = i18next\n  .use(Backend)\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    backend: {\n      // for all available options read the backend's repository readme file\n      loadPath: '/locales/{{lng}}/{{ns}}.json'\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC, useEffect } from 'react';\nimport { Snackbar, Button } from '@material-ui/core';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst ServiceWorkerWrapper: FC = () => {\n  const [showReload, setShowReload] = React.useState(false);\n  const [waitingWorker, setWaitingWorker] = React.useState<ServiceWorker | null>(null);\n\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n    setShowReload(true);\n    setWaitingWorker(registration.waiting);\n  };\n\n  useEffect(() => {\n    serviceWorkerRegistration.register({ onUpdate: onSWUpdate });\n  }, []);\n\n  const reloadPage = () => {\n    waitingWorker?.postMessage({ type: 'SKIP_WAITING' });\n    setShowReload(false);\n    window.location.reload();\n  };\n\n  return (\n    <Snackbar\n      open={showReload}\n      message=\"A new version is available!\"\n      onClick={reloadPage}\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      action={\n        <Button\n          color=\"inherit\"\n          size=\"small\"\n          onClick={reloadPage}\n        >\n          Reload\n        </Button>\n      }\n    />\n  );\n}\n\nexport default ServiceWorkerWrapper;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './i18next';\nimport reportWebVitals from './reportWebVitals';\nimport ServiceWorkerWrapper from './serviceWorkerWrapper';\n\nReactDOM.render(\n    <Suspense fallback=\"loading\">\n    <App />,\n    <ServiceWorkerWrapper />\n    </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}