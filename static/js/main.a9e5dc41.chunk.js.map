{"version":3,"sources":["theme.tsx","pages/index.tsx","App.tsx","serviceWorkerRegistration.ts","i18next.ts","reportWebVitals.ts","index.tsx"],"names":["theme","createMuiTheme","typography","button","textTransform","palette","primary","orange","secondary","purple","useStyles","makeStyles","heroButtons","marginTop","spacing","heroContent","backgroundColor","background","paper","padding","IndexPage","t","useTranslation","classes","className","Container","maxWidth","Typography","align","variant","component","color","Grid","container","justify","item","Button","App","i18n","changeLanguage","lng","ThemeProvider","onClick","path","isLocalhost","i18next","use","Backend","initReactI18next","LanguageDetector","init","backend","loadPath","fallbackLng","debug","interpolation","escapeValue","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","fallback","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a9e5dc41.chunk.js","sourcesContent":["import { orange, purple } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({      \n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  },\n  palette: {\n      primary: orange,\n      secondary: purple\n  }\n});\n\nexport default theme;","import { Button, Container, Grid, makeStyles, Typography } from '@material-ui/core'\nimport React from 'react'\nimport { useTranslation } from \"react-i18next\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  heroButtons: {\n    marginTop: theme.spacing(8),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  }\n}));\nconst IndexPage = () => {\n  const {t} = useTranslation('common');\n  const classes = useStyles();\n  return (\n    <>\n    <div className={classes.heroContent}>\n      <Container maxWidth=\"sm\">\n        <Typography align=\"center\" variant=\"h2\" component=\"h1\">\n          {t('title')}\n        </Typography>\n        <Typography align=\"center\" variant=\"h5\" color=\"textSecondary\">\n          {t('subtitle')}\n        </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\">\n                    {t('courses')}\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"outlined\" color=\"primary\">\n                    {t('discord')}\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n      </Container>\n      </div>\n    </>\n  );\n};\n\nexport default IndexPage\n\n","import React from 'react';\nimport './App.css';\nimport theme from './theme';\nimport { ThemeProvider } from '@material-ui/core';\nimport IndexPage from './pages/index';\nimport { Route, \n    BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nfunction App() {\n    const { i18n } = useTranslation();\n    const changeLanguage = (lng : string) => {\n      (i18n as any).changeLanguage(lng);\n    }\n  return (\n    <ThemeProvider theme={theme}>\n        <button onClick={() => changeLanguage('de')}>de</button>\n        <button onClick={() => changeLanguage('en')}>en</button>\n        <Router>\n            <Switch>\n                <Route path=\"/\" component={IndexPage} />\n            </Switch>\n        </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18next from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nconst i18n = i18next\n  .use(Backend)\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    backend: {\n      // for all available options read the backend's repository readme file\n      loadPath: '/locales/{{lng}}/{{ns}}.json'\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\nexport default i18n;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './i18next';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Suspense fallback=\"loading\">\n    <App />\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}