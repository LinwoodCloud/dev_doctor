{"version":3,"sources":["theme.tsx","components/appbar.tsx","pages/index.tsx","pages/courses.tsx","App.tsx","reportWebVitals.ts","i18next.ts","serviceWorkerRegistration.ts","serviceWorkerWrapper.tsx","index.tsx"],"names":["theme","createMuiTheme","typography","button","textTransform","palette","primary","orange","secondary","purple","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","MyAppBar","props","useTranslation","t","i18n","React","useState","languageAnchorEl","setLanguageAnchorEl","accountAnchorEl","setAccountAnchorEl","handleLanguageClose","classes","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","href","width","src","alt","Typography","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","anchorEl","keepMounted","open","Boolean","onClose","languages","map","e","MenuItem","lng","changeLanguage","selected","language","ListItemIcon","fontSize","ListItemText","heroButtons","marginTop","heroContent","backgroundColor","background","paper","padding","IndexPage","Container","maxWidth","align","component","Grid","container","justify","item","Button","icon","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","footer","CoursesPage","xs","sm","md","Card","CardMedia","image","CardContent","gutterBottom","CardActions","size","App","ThemeProvider","path","reportWebVitals","i18next","use","Backend","initReactI18next","LanguageDetector","init","backend","loadPath","fallbackLng","debug","interpolation","escapeValue","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","window","location","hostname","match","register","config","navigator","URL","process","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ServiceWorkerWrapper","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","useEffect","serviceWorkerRegistration","reloadPage","postMessage","type","Snackbar","message","anchorOrigin","vertical","horizontal","action","ReactDOM","render","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.fdac3ad4.chunk.js","sourcesContent":["import { orange, purple } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({      \n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  },\n  palette: {\n      primary: orange,\n      secondary: purple\n  }\n});\n\nexport default theme;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useTranslation } from \"react-i18next\";\nimport LanguageOutlinedIcon from '@material-ui/icons/LanguageOutlined';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport TuneOutlinedIcon from '@material-ui/icons/TuneOutlined';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport StarsOutlinedIcon from '@material-ui/icons/StarsOutlined';\nimport {\n    AppBar,\n    IconButton,\n    ListItemIcon,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Toolbar,\n    Typography,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\ninterface MyAppBarProps{\n    title: string;\n}\nexport default function MyAppBar(props : MyAppBarProps) {\n    const { t, i18n } = useTranslation('common');\n    const [languageAnchorEl, setLanguageAnchorEl] = React.useState(null);\n    const [accountAnchorEl, setAccountAnchorEl] = React.useState(null);\n\n    const handleLanguageClick = (event: { currentTarget: any }) => {\n        setLanguageAnchorEl(event.currentTarget);\n    };\n\n    const handleLanguageClose = () => {\n        setLanguageAnchorEl(null);\n    };\n    const handleAccountClick = (event: { currentTarget: any }) => {\n        setAccountAnchorEl(event.currentTarget);\n    };\n    const changeLanguage = (lng: string) => {\n        i18n.changeLanguage(lng);\n        handleLanguageClose();\n    };\n\n    const handleAccountClose = () => {\n        setAccountAnchorEl(null);\n    };\n\n    const classes = useStyles();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton\n                    edge=\"start\"\n                    className={classes.menuButton}\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    href=\"/\"\n                >\n                    <img width=\"32\" src=\"/assets/logo-dark.png\" alt=\"logo\" />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {props.title}\n                </Typography>\n                <IconButton\n                    aria-controls=\"language-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={handleLanguageClick}\n                >\n                    <LanguageOutlinedIcon />\n                </IconButton>\n                <Menu\n                    id=\"language-menu\"\n                    anchorEl={languageAnchorEl}\n                    keepMounted\n                    open={Boolean(languageAnchorEl)}\n                    onClose={handleLanguageClose}\n                >\n                    {i18n.languages.map((e) => (\n                        <MenuItem key={e} onClick={() => changeLanguage(e)} selected={e === i18n.language}>\n                            {t(\"language.\" + e)}\n                        </MenuItem>\n                    ))}\n                </Menu>\n                <IconButton\n                    aria-controls=\"account-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={handleAccountClick}\n                >\n                    <AccountCircleOutlinedIcon />\n                </IconButton>\n                <Menu\n                    id=\"account-menu\"\n                    anchorEl={accountAnchorEl}\n                    keepMounted\n                    open={Boolean(accountAnchorEl)}\n                    onClose={handleAccountClose}\n                >\n                    <MenuItem>\n                        <ListItemIcon>\n                            <TuneOutlinedIcon fontSize=\"small\" />\n                        </ListItemIcon>\n                        <ListItemText primary={t('profile')} />\n                    </MenuItem>\n                    <MenuItem>\n                        <ListItemIcon>\n                            <StarsOutlinedIcon fontSize=\"small\" />\n                        </ListItemIcon>\n                        <ListItemText primary={t('badges')} />\n                    </MenuItem>\n                    <MenuItem>\n                        <ListItemIcon>\n                            <SettingsOutlinedIcon fontSize=\"small\" />\n                        </ListItemIcon>\n                        <ListItemText primary={t('settings')} />\n                    </MenuItem>\n                    <MenuItem>\n                        <ListItemIcon>\n                            <InfoOutlinedIcon fontSize=\"small\" />\n                        </ListItemIcon>\n                        <ListItemText primary={t('info')} />\n                    </MenuItem>\n                </Menu>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import { Button, Container, Grid, makeStyles, Typography } from '@material-ui/core'\nimport React from 'react'\nimport { useTranslation } from \"react-i18next\";\nimport MyAppBar from '../components/appbar';\n\n\nconst useStyles = makeStyles((theme) => ({\n  heroButtons: {\n    marginTop: theme.spacing(8),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  }\n}));\nconst IndexPage = () => {\n  const {t} = useTranslation('common');\n  const classes = useStyles();\n  return (\n    <>\n    <MyAppBar title=\"Home\" />\n    <div className={classes.heroContent}>\n      <Container maxWidth=\"sm\">\n        <Typography align=\"center\" variant=\"h2\" component=\"h1\">\n          {t('title')}\n        </Typography>\n        <Typography align=\"center\" variant=\"h5\" color=\"textSecondary\">\n          {t('subtitle')}\n        </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button href=\"/courses\" variant=\"contained\" color=\"primary\">\n                    {t('courses')}\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"outlined\" color=\"primary\">\n                    {t('discord')}\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n      </Container>\n      </div>\n    </>\n  );\n};\n\nexport default IndexPage\n\n","import React, { ReactElement } from 'react'\nimport MyAppBar from '../components/appbar';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Card, CardActions, CardContent, CardMedia, Container, Grid, makeStyles, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n      marginRight: theme.spacing(2),\n    },\n    heroContent: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n      marginTop: theme.spacing(4),\n    },\n    cardGrid: {\n      paddingTop: theme.spacing(8),\n      paddingBottom: theme.spacing(8),\n    },\n    card: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    cardMedia: {\n      paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n      flexGrow: 1,\n    },\n    footer: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(6),\n    },\n  }));\n\nexport default function CoursesPage(): ReactElement {\n    const classes = useStyles();\n    const cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const {t} = useTranslation('courses');\n    return (\n        <>\n          <MyAppBar title={t('title')} />\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {cards.map((card) => (\n              <Grid item key={card} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image=\"https://source.unsplash.com/random\"\n                    title=\"Image title\"\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Heading\n                    </Typography>\n                    <Typography>\n                      This is a media card. You can use this section to describe the content.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      View\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                      Edit\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n        </>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport theme from './theme';\nimport { ThemeProvider } from '@material-ui/core';\nimport IndexPage from './pages/index';\nimport CoursesPage from './pages/courses';\nimport {\n  Route,\n  BrowserRouter as Router, Switch\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/courses\" component={CoursesPage} />\n          <Route path=\"/\" component={IndexPage} />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18next from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nconst i18n = i18next\n  .use(Backend)\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    backend: {\n      // for all available options read the backend's repository readme file\n      loadPath: '/locales/{{lng}}/{{ns}}.json'\n    },\n    fallbackLng: ['en', 'de'],\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC, useEffect } from 'react';\nimport { Snackbar, Button } from '@material-ui/core';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst ServiceWorkerWrapper: FC = () => {\n  const [showReload, setShowReload] = React.useState(false);\n  const [waitingWorker, setWaitingWorker] = React.useState<ServiceWorker | null>(null);\n\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n    setShowReload(true);\n    setWaitingWorker(registration.waiting);\n  };\n\n  useEffect(() => {\n    serviceWorkerRegistration.register({ onUpdate: onSWUpdate });\n  }, []);\n\n  const reloadPage = () => {\n    waitingWorker?.postMessage({ type: 'SKIP_WAITING' });\n    setShowReload(false);\n    window.location.reload();\n  };\n\n  return (\n    <Snackbar\n      open={showReload}\n      message=\"A new version is available!\"\n      onClick={reloadPage}\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      action={\n        <Button\n          color=\"inherit\"\n          size=\"small\"\n          onClick={reloadPage}\n        >\n          Reload\n        </Button>\n      }\n    />\n  );\n}\n\nexport default ServiceWorkerWrapper;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './i18next';\nimport reportWebVitals from './reportWebVitals';\nimport ServiceWorkerWrapper from './serviceWorkerWrapper';\n\nReactDOM.render(\n    <Suspense fallback=\"loading\">\n    <App />,\n    <ServiceWorkerWrapper />\n    </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}